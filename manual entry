
import pandas as pd
import re
import string
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier
from sklearn.metrics import classification_report

data_fake = pd.DataFrame({
    "title": [
        "Donald Trump Sends Out Embarrassing New Year Message",
        "Aliens land in India to teach yoga",
        "Government bans water because it's dangerous",
        "Celebrity claims Earth is flat again"
    ],
    "text": [
        "Donald Trump just couldn't wish all Americans happy new year without controversy.",
        "Social media claims aliens have landed to teach yoga in New Delhi — no evidence supports this.",
        "Rumors say the government banned water usage after scientists called it dangerous.",
        "A famous celebrity claimed Earth is flat during an interview on Sunday."
    ],
    "subject": ["News", "Conspiracy", "Politics", "Entertainment"],
    "date": ["January 1, 2020"]*4
})

data_true = pd.DataFrame({
    "title": [
        "NASA confirms water on the Moon",
        "India launches new satellite successfully",
        "WHO announces end of Ebola outbreak in Congo",
        "Stock markets rise as inflation slows"
    ],
    "text": [
        "NASA announced it has confirmed the presence of water on the moon’s surface.",
        "India successfully launched a new communication satellite from Sriharikota.",
        "The World Health Organization confirmed that the Ebola outbreak in Congo has ended.",
        "Stock markets across Asia rose sharply today as inflation numbers improved."
    ],
    "subject": ["Science", "Technology", "Health", "Economy"],
    "date": ["January 1, 2020"]*4
})

data_fake["class"] = 0
data_true["class"] = 1

# Combine both
data = pd.concat([data_fake, data_true], axis=0)
data = data.drop(["title", "subject", "date"], axis=1)

def clean_text(text):
    text = text.lower()
    text = re.sub('\[.*?\]', '', text)
    text = re.sub("\\W", " ", text)
    text = re.sub('https?://\S+|www\.\S+', '', text)
    text = re.sub('<.*?>+', '', text)
    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)
    text = re.sub('\w*\d\w*', '', text)
    return text

data["text"] = data["text"].apply(clean_text)

x = data["text"]
y = data["class"]
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=42)

vectorizer = TfidfVectorizer()
xv_train = vectorizer.fit_transform(x_train)
xv_test = vectorizer.transform(x_test)

LR = LogisticRegression()
DT = DecisionTreeClassifier()
GB = GradientBoostingClassifier()
RF = RandomForestClassifier()

LR.fit(xv_train, y_train)
DT.fit(xv_train, y_train)
GB.fit(xv_train, y_train)
RF.fit(xv_train, y_train)


print("\n Logistic Regression Accuracy:", LR.score(xv_test, y_test))
print("\nClassification Report (LR):\n", classification_report(y_test, LR.predict(xv_test)))

print("\n Decision Tree Accuracy:", DT.score(xv_test, y_test))
print("\n Gradient Boosting Accuracy:", GB.score(xv_test, y_test))
print("\n Random Forest Accuracy:", RF.score(xv_test, y_test))

def output_label(n):
    return "Fake News" if n == 0 else "Not Fake News"

def manual_testing(news):
    new_df = pd.DataFrame({"text": [news]})
    new_df["text"] = new_df["text"].apply(clean_text)
    new_x = vectorizer.transform(new_df["text"])
    preds = {
        "Logistic Regression": output_label(LR.predict(new_x)[0]),
        "Decision Tree": output_label(DT.predict(new_x)[0]),
        "Gradient Boosting": output_label(GB.predict(new_x)[0]),
        "Random Forest": output_label(RF.predict(new_x)[0])
    }
    for model, pred in preds.items():
        print(f"{model} Prediction: {pred}")


print("\nTesting Model with Sample News:\n")
manual_testing("NASA announced it has confirmed the presence of water on the moon’s surface.")

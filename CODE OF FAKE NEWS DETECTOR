import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix

# Load the dataset
df = pd.read_csv('news.csv')

# Drop any rows with missing values
df = df.dropna()

# Map the labels to numerical values (0 for FAKE, 1 for REAL)
df['label'] = df['label'].apply(lambda x: 0 if x == 'FAKE' else 1)

# Combine the title and text for a more robust analysis
df['combined_text'] = df['title'] + " " + df['text']

# Split the data into training and testing sets
X = df['combined_text']
y = df['label']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a TF-IDF Vectorizer
tfidf_vectorizer = TfidfVectorizer(stop_words='english', max_df=0.7)

# Fit and transform the training data
tfidf_train = tfidf_vectorizer.fit_transform(X_train)

# Transform the testing data
tfidf_test = tfidf_vectorizer.transform(X_test)

# Initialize a Logistic Regression classifier
classifier = LogisticRegression()

# Train the classifier
classifier.fit(tfidf_train, y_train)

# Make predictions on the test set
y_pred = classifier.predict(tfidf_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)

print(f"Model Accuracy: {accuracy*100:.2f}%")
print("Confusion Matrix:\n", conf_matrix)

# Example of predicting a new article
new_article = "Fake news headline: Scientists discover that all humans are now invisible."
new_article_tfidf = tfidf_vectorizer.transform([new_article])
prediction = classifier.predict(new_article_tfidf)

if prediction[0] == 0:
    print("The article is classified as FAKE.")
else:
    print("The article is classified as REAL.")


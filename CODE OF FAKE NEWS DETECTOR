# model.py
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import pickle

# ==============================
# 1. Load Dataset
# ==============================
true_news = pd.read_csv("data/True.csv")
fake_news = pd.read_csv("data/Fake.csv")

true_news["label"] = 1  # Real = 1
fake_news["label"] = 0  # Fake = 0

data = pd.concat([true_news, fake_news], axis=0)
data = data.sample(frac=1, random_state=42).reset_index(drop=True)

print(f"Total samples: {len(data)}")

# ==============================
# 2. Preprocessing
# ==============================
X = data["text"]
y = data["label"]

# TF-IDF Vectorizer
vectorizer = TfidfVectorizer(stop_words="english", max_df=0.7)
X_vec = vectorizer.fit_transform(X)

# Split into training and testing
X_train, X_test, y_train, y_test = train_test_split(
    X_vec, y, test_size=0.2, random_state=42
)

# ==============================
# 3. Train the Model
# ==============================
model = LogisticRegression()
model.fit(X_train, y_train)

# ==============================
# 4. Evaluate Model
# ==============================
y_pred = model.predict(X_test)
print(f"Accuracy: {accuracy_score(y_test, y_pred):.4f}")
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# ==============================
# 5. Save Model and Vectorizer
# ==============================
with open("model.pkl", "wb") as f:
    pickle.dump(model, f)

with open("vectorizer.pkl", "wb") as f:
    pickle.dump(vectorizer, f)

print("âœ… Model and vectorizer saved successfully!")

